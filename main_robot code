MODULE Robot1_Assembly

    VAR socketdev client_socket;
    VAR string server_ip := "192.168.3.5";
    CONST num server_port := 3000;

    VAR socketstatus client_status;
    VAR string received_msg := "";    
    VAR string cntmsg;

    VAR num state := 0;

    CONST robtarget p_HOME := [[401.30,0.88,390.17],[1.02157E-05,-0.0335374,-0.999437,-1.21369E-06],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_WhL := [[406.91,-234.87,390.18],[2.67452E-05,-0.0335581,-0.999437,-1.55407E-05],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Wh1 := [[405.74,-112.44,194.04],[0.0174718,-0.0174189,-0.706836,-0.706948],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Wh2 := [[403.56,-17.92,192.96],[0.00287213,0.00281829,-0.707029,0.707173],[0,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Wh3 := [[338.26,-113.45,192.34],[0.0174984,-0.0174415,-0.706757,-0.707025],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Wh4 := [[335.94,-21.19,191.98],[0.00290614,0.00285782,-0.707002,0.707199],[0,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
      
    CONST robtarget p_plate1 := [[-82.10,393.11,262.43],[0.0101627,-0.296591,-0.954945,-0.00340881],[1,0,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_plate2 := [[286.04,437.61,196.85],[0.0101577,-0.296591,-0.954945,-0.00335526],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_plate := [[261.52,-67.70,165.69],[0.0102339,-0.296662,-0.954922,-0.00334983],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_p := [[512.32,0.88,390.17],[3.89889E-07,-0.0335523,-0.999437,-1.1333E-06],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    CONST robtarget p_BODYRD := [[-315.30,-507.89,137.95],[0.010164,-0.296667,-0.954921,-0.00337105],[-2,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_BODYWH := [[-285.96,-394.59,133.70],[0.0102041,-0.296687,-0.954914,-0.00339697],[-2,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_body := [[339.87,-70.20,240.79],[0.0102037,-0.296663,-0.954922,-0.00338306],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_p1 := [[-471.44,-404.84,340.80],[0.0101718,-0.296676,-0.954918,-0.00335647],[-2,-1,-2,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    CONST robtarget p_BASEBK := [[13.97,-382.29,109.97],[0.0101846,-0.296728,-0.954902,-0.0033623],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_BASEWH := [[22.19,-531.29,22.17],[0.0103933,-0.296671,-0.954918,-0.00326505],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_base := [[337.43,-69.56,222.17],[0.010196,-0.296731,-0.954901,-0.00335558],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_p2 := [[22.26,-400.29,340.81],[0.0101522,-0.296678,-0.954918,-0.00337158],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    CONST robtarget Car_H:=[[334.43,-68.72,204.96],[0.00973878,-0.880611,-0.473715,0.00484347],[-1,0,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Car_Rl1:=[[755.54,260.54,454.24],[5.75477E-06,0.0335473,0.999437,3.74537E-06],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Car_Rl2:=[[261.52,-67.67,369.99],[0.00976686,-0.880624,-0.473691,0.00486207],[-1,0,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Car_OuT:=[[541.51,379.10,628.75],[7.97675E-05,-0.0335653,-0.999436,-6.8783E-05],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Get_Box:=[[333.16,361.53,101.87],[1.26894E-05,-0.0335347,-0.999438,1.71634E-05],[0,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_Black_Box:=[[321.49,-381.89,27.75],[0.000151894,-0.0335793,-0.999436,-0.000153975],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget p_White_Box:=[[330.20,-540.53,26.40],[3.94474E-05,-0.0335381,-0.999437,-5.36181E-05],[-1,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    TASK PERS tooldata tool_one:=[TRUE,[[0,0,110],[1,0,0,0]],[0.2,[0,0,50],[1,0,0,0],0,0,0]];     

    PROC client_init()
        SocketCreate client_socket;
        SocketConnect client_socket, server_ip, server_port;
        TPWrite "Connected to server at " + server_ip + ":" + NumToStr(server_port, 0);
        SocketSend client_socket \Str := "ROLE_ABB";
    ENDPROC
    
    PROC client_close()
        SocketClose client_socket;
        TPWrite "Client socket closed";
    ENDPROC

    PROC main()
        
        MoveL p_plate, v20, fine, tool_one;
        MoveL p_base, v20, fine, tool_one;
        MoveL p_body, v20, fine, tool_one;
        MoveL Car_H, v20, fine, tool_one;
        MoveL Car_Rl1, v20, fine, tool_one;
        MoveL Car_Rl2, v20, fine, tool_one;
        MoveL Car_OuT, v20, fine, tool_one;
        MoveL p_p, v20, fine, tool_one;
        MoveL p_p1, v20, fine, tool_one;
        MoveL p_p2, v20, fine, tool_one;
        
        
        AccSet 1,1;
        client_init;
        MoveJ p_HOME, v500, z50, tool_one;
        grip_off;

        TPWrite "Waiting for initial give1_ready command...";
        WHILE TRUE DO
            SocketReceive client_socket \Str := received_msg;
            IF received_msg = "give1_ready" THEN
                INCOME;
                SocketSend client_socket \Str := "white_con_comp";
                received_msg := "";
                BREAK;
            ELSEIF received_msg <> "" THEN
                TPWrite "Invalid command. Waiting for INCOME.";
                SocketSend client_socket \Str := "ERROR: WAITING_FOR_give1_ready";
                received_msg := "";
            ENDIF
            WaitTime 0.1;
        ENDWHILE

        FOR i FROM 1 TO 2 DO
            TPWrite "Starting car assembly number " + ValToStr(i) + " of 2.";
            state := 1;

            WHILE state < 6 DO
                client_status := SocketGetStatus(client_socket);
                IF client_status <> SOCKET_CONNECTED THEN
                    TPWrite "Server connection lost. Waiting to reconnect...";
                    WHILE client_status <> SOCKET_CONNECTED DO
                        WaitTime 1;
                        client_status := SocketGetStatus(client_socket);
                    ENDWHILE
                    TPWrite "Reconnected to server.";
                    SocketSend client_socket \Str := "ROLE_ABB";
                ENDIF
                
                SocketReceive client_socket \Str := received_msg;

                IF received_msg <> "" THEN
                    TPWrite "Received Command:" + received_msg;
                    SocketSend client_socket \Str := "C";
                    
                    TEST state
                    CASE 1:
                         IF i=1 THEN
                            Put_PlT1;
                            state := 2;
                            SocketSend client_socket \Str := "C";
                        ELSEIF i=2 THEN
                            Put_PlT2;
                            state := 2;
                            SocketSend client_socket \Str := "C"; 
                        ENDIF
                    CASE 2:
                        TEST received_msg
                        CASE "BASEBK", "BASEWH":
                            Assemble_Lower_Body received_msg;
                            state := 3;
                            SocketSend client_socket \Str := "C";
                        DEFAULT:
                            TPWrite "ERROR: Expected LOWER command. Received: " + received_msg;
                            SocketSend client_socket \Str := "ERROR: WRONG_ORDER";
                        ENDTEST
                    CASE 3: 
                        TEST received_msg
                        CASE "BODYRD", "BODYWH":
                            Assemble_Upper_Body received_msg;
                            state := 4;
                            SocketSend client_socket \Str := "C";
                        DEFAULT:
                            TPWrite "ERROR: Expected UPPER command. Received: " + received_msg;
                            SocketSend client_socket \Str := "ERROR: WRONG_ORDER";
                        ENDTEST
                    CASE 4:
                        TEST received_msg
                        CASE "WHEELBK": Get_Wh_Black; state := 5;
                            SocketSend client_socket \Str := "C";
                        CASE "WHEELWH": Get_Wh_White; state := 5;
                            SocketSend client_socket \Str := "C";
                        DEFAULT:
                            TPWrite "ERROR: Expected WHEELS command. Received: " + received_msg;
                            SocketSend client_socket \Str := "ERROR: WRONG_ORDER";
                        ENDTEST
                    CASE 5:
                        IF i=1 THEN
                            Rl1;
                            state := 6;
                            SocketSend client_socket \Str := "C";
                        ELSEIF i=2 THEN
                            Rl2;
                            state := 6;
                            SocketSend client_socket \Str := "ready_car";
                        ELSE
                            TPWrite "ERROR: Expected RELEASE command. Received: " + received_msg;
                            SocketSend client_socket \Str := "ERROR: WRONG_ORDER";
                        ENDIF
                    DEFAULT:
                        TPWrite "Unknown state or command: " + received_msg;
                        SocketSend client_socket \Str := "ERROR: UNKNOWN_COMMAND";
                    ENDTEST
                    received_msg := "";
                ENDIF
                WaitTime 0.1;
            ENDWHILE
            TPWrite "Car assembly number " + ValToStr(i) + " complete. Preparing for the next car.";
        ENDFOR
      
        DROP;
        
        TPWrite "All 4 cars have been assembled. Program finished.";
        SocketSend client_socket \Str := "4C";
        client_close;
    ENDPROC

    PROC INCOME()
        MoveJ offs(p_Get_Box,0,0,30), v500, z50, tool_one;
        MoveL p_Get_Box, v20, fine, tool_one;
        Grip_on;
        MoveJ offs(p_Get_Box,0,0,30), v500, z50, tool_one;        
        MoveL p_HOME, v500, z50, tool_one;
        
        SocketSend client_socket \Str := "black_con_comp";
        
        MoveJ offs(p_Black_Box,0,0,30), v300, z50, tool_one;
        MoveL p_Black_Box, v20, fine, tool_one;
        Grip_off;
        MoveJ offs(p_Black_Box,0,0,30), v300, z50, tool_one;
        MoveL p_HOME, v500, z50, tool_one;        
        
        MoveJ offs(p_Get_Box,0,0,30), v500, z50, tool_one;
        MoveL p_Get_Box, v20, fine, tool_one;
        Grip_on;
        MoveJ offs(p_Get_Box,0,0,30), v500, z50, tool_one;
        MoveL p_HOME, v500, z50, tool_one;
        MoveJ offs(p_White_Box,0,0,30), v300, z50, tool_one;
        MoveL p_White_Box, v20, fine, tool_one;
        Grip_off;
        MoveJ offs(p_White_Box,0,0,30), v300, z50, tool_one;
        MoveL p_HOME, v500, z50, tool_one;       
    ENDPROC
    
    PROC Put_PlT1()
        MoveJ offs(p_plate1,0,0,50), v200, z50, tool_one;
        MoveL p_plate1, v20, fine, tool_one;
        Grip_on;
        MoveL offs(p_plate1,-200,0,0), v100, z50, tool_one;
        MoveL p_p, v100, z50, tool_one;
        MoveL offs(p_plate,0,0,50), v100, z50, tool_one;
        MoveL p_plate, v20, fine, tool_one;
        Grip_off;
        MoveL offs(p_plate,0,0,50), v100, z50, tool_one;       
    ENDPROC
    
    PROC Put_PlT2()
        MoveJ offs(p_plate2,0,0,50), v200, z50, tool_one;
        MoveL p_plate2, v20, fine, tool_one;
        Grip_on;
        MoveL offs(p_plate2,-200,0,0), v100, z50, tool_one;
        MoveL p_p, v100, z50, tool_one;
        MoveL offs(p_plate,0,0,50), v100, z50, tool_one;
        MoveL p_plate, v20, fine, tool_one;
        Grip_off;
        MoveL offs(p_plate,0,0,50), v100, z50, tool_one;       
    ENDPROC
 
    PROC Assemble_Lower_Body(string color)
        TEST color
        CASE "BASEBK":
            Put_BasE p_BASEBK, p_p2, p_base;
        CASE "BASEWH":
            Put_BasE p_BASEWH, p_p2, p_base;
        ENDTEST
    ENDPROC

    PROC Assemble_Upper_Body(string color)
        TEST color
        CASE "BODYRD":
            Put_BodY p_BODYRD, p_p1, p_body;
        CASE "BODYBL":
            Put_BodY p_BODYWH, p_p1, p_body;
        ENDTEST
    ENDPROC
    
    PROC Put_BasE(robtarget p_body_2, robtarget p_p2, robtarget p_base)
        MoveJ offs(p_body_2,0,0,50), v200, z50, tool_one;
        MoveL p_body_2, v20, fine, tool_one;
        Grip_on;
        MoveL offs(p_body_2,0,0,50), v100, z50, tool_one;
        MoveL p_p2, v100, z50, tool_one;
        MoveL offs(p_base,0,0,50), v100, z50, tool_one;
        MoveL p_base, v20, fine, tool_one;
        Grip_off;
        MoveL offs(p_base,0,0,50), v100, z50, tool_one;
    ENDPROC    

    PROC Put_BodY(robtarget p_body_1, robtarget p_p1, robtarget p_body)
        MoveJ offs(p_body_1,0,0,50), v200, z50, tool_one;
        MoveL p_body_1, v20, fine, tool_one;
        Grip_on;
        MoveL offs(p_body_1,0,0,50), v100, z50, tool_one;
        MoveL p_p1, v100, z50, tool_one;
        MoveL offs(p_body,0,0,50), v100, z50, tool_one;
        MoveL p_body, v20, fine, tool_one;
        Grip_off;
        MoveL offs(p_body,0,0,50), v100, z50, tool_one;
    ENDPROC

    PROC Get_Wh_Black()
        VAR num x_offset := 0;
        VAR num y_offset := 0;
        VAR num wheel_count := 1;
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ offs(p_Black_Box,0,0,50), v500, z50, tool_one;
        FOR i FROM 0 TO 1 DO
            FOR j FROM 0 TO 1 DO
                MoveJ Offs(p_Black_Box, x_offset, y_offset, 50), v500, z50, tool_one;
                MoveL Offs(p_Black_Box, x_offset, y_offset, 0), v20, fine, tool_one;
                grip_on;
                MoveL Offs(p_Black_Box, x_offset, y_offset, 50), v100, z50, tool_one;
                TEST wheel_count
                CASE 1:
                    Put_Wh1;
                CASE 2:
                    Put_Wh2;
                CASE 3:
                    Put_Wh3;
                CASE 4:
                    Put_Wh4;
                ENDTEST
                wheel_count := wheel_count + 1;
                x_offset := x_offset - 60;
            ENDFOR
            y_offset := y_offset + 60;
            x_offset := 0;
        ENDFOR
        MoveJ p_HOME, v500, z50, tool_one;
    ENDPROC

    PROC Get_Wh_White()
        VAR num x_offset := 0;
        VAR num y_offset := 0;
        VAR num wheel_count := 1;
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ offs(p_White_Box,0,0,50), v500, z50, tool_one;
        FOR i FROM 0 TO 1 DO
            FOR j FROM 0 TO 1 DO
                MoveJ Offs(p_White_Box, x_offset, y_offset, 50), v500, z50, tool_one;
                MoveL Offs(p_White_Box, x_offset, y_offset, 0), v20, fine, tool_one;
                grip_on;
                MoveL Offs(p_White_Box, x_offset, y_offset, 50), v100, z50, tool_one;
                TEST wheel_count
                CASE 1:
                    Put_Wh1;
                CASE 2:
                    Put_Wh2;
                CASE 3:
                    Put_Wh3;
                CASE 4:
                    Put_Wh4;
                ENDTEST
                wheel_count := wheel_count + 1;
                x_offset := x_offset - 60;
            ENDFOR
            y_offset := y_offset + 60;
            x_offset := 0;
        ENDFOR
        MoveJ p_HOME, v500, z50, tool_one;
    ENDPROC

    PROC Put_Wh1()
        MoveL p_WhL, v500, z50, tool_one;
        MoveJ offs(p_Wh1,0,-50,0), v500, z50, tool_one;
        MoveL p_Wh1, v20, fine, tool_one;
        Grip_off;
        MoveL offs(p_Wh1,0,-50,0), v100, z50, tool_one;        
        MoveL p_WhL, v500, z50, tool_one;
    ENDPROC
    
    PROC Put_Wh2()
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ Offs(p_Wh2,0,50,0), v500, z50, tool_one;
        MoveL p_Wh2, v20, fine, tool_one;
        Grip_off;
        MoveL Offs(p_Wh2,0,50,0), v100, z50, tool_one;                 
    ENDPROC
        
    PROC Put_Wh3()
        MoveL p_WhL, v500, z50, tool_one;
        MoveJ offs(p_Wh3,0,-50,0), v500, z50, tool_one;
        MoveL p_Wh3, v20, fine, tool_one;
        Grip_off;                 
        MoveL offs(p_Wh3,0,-50,0), v100, z50, tool_one;    
        MoveL p_WhL, v500, z50, tool_one;
    ENDPROC    
    
    PROC Put_Wh4()
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ Offs(p_Wh4,0,50,0), v500, z50, tool_one;
        MoveL p_Wh4, v20, fine, tool_one;
        Grip_off;            
        MoveL Offs(p_Wh4,0,50,0), v100, z50, tool_one;                 
    ENDPROC    
    
    PROC Rl1()
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ offs(Car_H,0,0,50), v500, z50, tool_one;
        MoveL Car_H, v20, fine, tool_one;
        grip_on;
        MoveJ offs(Car_H,0,0,50), v500, z50, tool_one;
        MoveJ Offs(Car_Rl1, 0, 0, 50), v500, z50, tool_one;
        MoveL Car_Rl1, v20, fine, tool_one;
        grip_off;
        MoveJ Offs(Car_Rl1, 0, 0, 50), v500, z50, tool_one;
        MoveJ p_HOME, v500, z50, tool_one;
    ENDPROC
    
    PROC Rl2()
        MoveJ p_HOME, v500, z50, tool_one;
        MoveJ offs(Car_H,0,0,50), v500, z50, tool_one;
        MoveL Car_H, v20, fine, tool_one;
        grip_on;
        MoveJ offs(Car_H,0,0,50), v500, z50, tool_one;
        MoveJ Offs(Car_Rl2, 0, 0, 50), v500, z50, tool_one;
        MoveL Car_Rl2, v20, fine, tool_one;
        grip_off;
        MoveJ Offs(Car_Rl2, 0, 0, 50), v500, z50, tool_one;
        MoveJ p_HOME, v500, z50, tool_one;
    ENDPROC
    
    PROC DROP()          
         IF received_msg = "car1_receive_ready" THEN                    
            MoveJ p_HOME, v500, z50, tool_one;
            MoveJ offs(Car_Rl1,0,0,50), v500, z50, tool_one;
            MoveL Car_Rl1, v20, fine, tool_one;
            grip_on;
            MoveJ offs(Car_Rl1,0,0,50), v500, z50, tool_one;
            MoveJ Offs(Car_OuT, 0, 0, 50), v500, z50, tool_one;
            MoveL Car_OuT, v20, fine, tool_one;
            grip_off;
            MoveJ Offs(Car_OuT, 0, 0, 50), v500, z50, tool_one;
            MoveJ p_HOME, v500, z50, tool_one;
            
            SocketSend client_socket \Str := "car1_give";
            received_msg := "";
            
            IF received_msg = "car2_receive_ready" THEN                
                MoveJ p_HOME, v500, z50, tool_one;
                MoveJ offs(Car_Rl2,0,0,50), v500, z50, tool_one;
                MoveL Car_Rl2, v20, fine, tool_one;
                grip_on;
                MoveJ offs(Car_Rl2,0,0,50), v500, z50, tool_one;
                MoveJ Offs(Car_OuT, 0, 0, 50), v500, z50, tool_one;
                MoveL Car_OuT, v20, fine, tool_one;
                grip_off;
                MoveJ Offs(Car_OuT, 0, 0, 50), v500, z50, tool_one;
                MoveJ p_HOME, v500, z50, tool_one;
                BREAK;
                SocketSend client_socket \Str := "car2_give";
                received_msg := "";            
            ENDIF
        ELSE
            TPWrite "Invalid command. Waiting for INCOME.";
            SocketSend client_socket \Str := "ERROR: WAITING_FOR_give1_ready";
            received_msg := "";
        ENDIF
        
    ENDPROC
    
    PROC grip_on()
        PulseDO\PLength:=0.2, do00_grip_on;
        WaitDI di00_grip_on_sen, 1;
    ENDPROC
    
    PROC grip_off()
        PulseDO\PLength:=0.2, do01_grip_off;
        WaitDI di01_grip_off_sen, 1;
    ENDPROC

    TRAP E_STOP
        VAR robtarget e_stop_pos;
        StopMove;
        StorePath;
        e_stop_pos:= CRobT();    
        MoveJ p_HOME, v200, z50, tool_one;
        WaitDI di08_restart,1;
        MoveL e_stop_pos, v100, fine, tool_one;
        RestoPath;
        StartMove;
    ENDTRAP
ENDMODULE
